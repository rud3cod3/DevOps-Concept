## Configure user information in git

git config --global user.name "rud3cod3"			# for username
git config --global user.email "devops6722@gmail.com"		# for email
git config --list						# list information

## Other General git commands

git init					# initialize git repo
git add . 					# add all file for staging / we can also add specific file
git status					# check files status
git commit -m "message here" 			# with the commit add msg for the future reference
git commit -am "all the pending commmits"	# add and commit at the same time
git diff					# will let you see the difference

# Suppose you modified one file now you want to know what changes has been made 
git diff filename			# let you see the changes which are made (don't commit if you are practising)

# Inshort if specified a file which is not commited this diff command will show you the changes which are done to that particular file and if we use git diff it wil show all the file changes which are made

## Git tracking and git logs

git log					# shows last 10 logs
git log --oneline			# logs in oneline
git log --oneline --graph		# shows a graph of things which were merged
git log --author="rud3cod3"		# see logs with author / who pushed which commit / WE CAN ALSO USE EMAIL ID INSTEAD OF USERNAME
git log --stat                		# shows files changed per commit
git log -p                    		# shows code changes per commit
git show <commit-id>          		# show details of one commit

## Git branch related commands

When we create a branch in local we have to push it in order to work with it 

git branch                   		# show branches
git branch -a 				# list all the branches
git branch -m old-name new-name		# rename branch
git branch useme              		# create branch
git switch useme              		# move to the branch
git push -u origin useme      		# push branch to GitHub and set upstream tracking
git switch main               		# go back to main

## Git Merge

# Merging two branches
# Switch to the branch where you want to merge the code and take pull first

git switch main			# switch to main branch
git pull main			# pulling the changes if any
git merge useme			# useme branch will be merged into our main branch 
git merge useme -m "msg"	# merge commit helpfull while troubleshooting

Then

git add .
git status
git commit
git push	

## Reverting the code 

RESET - Think of it as a "rollback" / to the preveous commit
REVERT - Identical in a way of work but the approach is different / In simple language when we use this it adds one commit on top with changes of the desired commit like keeping the old code with a new commit

git reset --soft <commit-id>   	# keep changes staged / Only modify the commit history not the actual change
git reset --mixed <commit-id>  	# keep changes unstaged (default)
git reset --hard <commit-id>   	# delete all changes permanently
git revert <commit-id>		# Creates a new commit that undoes changes of a previous commit

If user have already pushed commits to remote repo a REVERT is a nicer way to cancel out changes
Reset is a good option when we are working on local setup

# Compare working directory and Staging area

we are here talking about { git diff }
git diff commit1 commit2	# show what changes are done between this two commits (all the changes)

## stashing 

git stash list			# to see list of stashed changes
git stash apply			# applying stashed changes
git stash drop 			# droping stashed changes (must do else it will stay there)

# In git there are two type of file Untracked and Tracked 
# Untracked means files which are not commited and Tracked means the files which are already commited
# Bydefault we cannot Track unstashed file but if it is a requirement we can do somethings which are

git stash -a 			# it will also stash all the files tracked / Untracked
git stash pop			# to pop stashed file

# stash apply will keep the data in list even after we apply stash but the git pop will pop it

## Multi stash

git stash save "message"	# stash with message only work with tagged files
git stash show stash@{index}	# find changes done in specific stash work only with tracked files  
git stash apply stash@{index}	# apply specific stash
git stash pop stash@{index}	# pop with index
